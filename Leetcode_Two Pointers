#826. Most Profit Assigning Work
#Time = O(NlogN+QlogQ), where N is the number of jobs, and Q is the number of peopleï¼ŒSpace=O(N)

class Solution:
    def maxProfitAssignment(self, difficulty: List[int], profit: List[int], worker: List[int]) -> int:
        jobs = sorted(zip(difficulty, profit))
        res = 0
        i = 0
        best = 0
        for ability in sorted(worker):
            while i < len(jobs) and ability >= jobs[i][0]:
                best = max(jobs[i][1], best)
                i += 1
            res += best
        return res

#11. Container With Most Water
#Time= O(n), space=O(1)
class Solution:
    def maxArea(self, height: List[int]) -> int:
        left=0
        right=len(height)-1
        res=0
        while left<right:
            w=right-left
            res=max(res,w*min(height[left],height[right]))
            if height[left]<=height[right]:
                left+=1
            else:
                right-=1
        return res
