#826. Most Profit Assigning Work
#Time = O(NlogN+QlogQ), where N is the number of jobs, and Q is the number of peopleï¼ŒSpace=O(N)

class Solution:
    def maxProfitAssignment(self, difficulty: List[int], profit: List[int], worker: List[int]) -> int:
        jobs = sorted(zip(difficulty, profit))
        res = 0
        i = 0
        best = 0
        for ability in sorted(worker):
            while i < len(jobs) and ability >= jobs[i][0]:
                best = max(jobs[i][1], best)
                i += 1
            res += best
        return res

#11. Container With Most Water
#Time= O(n), space=O(1)
class Solution:
    def maxArea(self, height: List[int]) -> int:
        left=0
        right=len(height)-1
        res=0
        while left<right:
            w=right-left
            res=max(res,w*min(height[left],height[right]))
            if height[left]<=height[right]:
                left+=1
            else:
                right-=1
        return res

#167. Two Sum II - Input array is sorted
#Time= O(n), space=O(1)
class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        left=0
        right=len(numbers)-1
        while left <= right:
            if numbers[left]+numbers[right]==target:
                return [left+1,right+1]
            elif numbers[left]+numbers[right]<target:
                left+=1
            else:
                right-=1
        return [-1,-1]
        
#977. Squares of a Sorted Array
##Time= O(n), space=O(n)
class Solution:
    def sortedSquares(self, A: List[int]) -> List[int]:
        n=len(A)
        res=[0]*n
        left=0
        right=n-1
        while left<=right:
            if(abs(A[left])<abs(A[right])):
                res[right-left]=A[right]**2
                right-=1
            else:
                res[right-left]=A[left]**2
                left+=1
            
        return res

#88. Merge Sorted Array
#Time= O(n), space=O(n)
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        i=m-1
        j=n-1
        k=m+n-1
        while i >= 0 and j>=0:
            if nums1[i]>=nums2[j]:
                nums1[k]=nums1[i]
                i-=1
                k-=1
            else:
                nums1[k]=nums2[j]
                k-=1
                j-=1
        while j>=0:
            nums1[k]=nums2[j]
            k-=1
            j-=1

#925. Long Pressed Name
#Time= O(n), space=O(n)
class Solution:
    def isLongPressedName(self, name: str, typed: str) -> bool:
        m=len(name)
        n=len(typed)
        i=0
        for j in range(n):
            if i<m and name[i]==typed[j]:
                i+=1
            elif j==0 or typed[j] != typed[j-1]:
                return False
        return i==len(name)
