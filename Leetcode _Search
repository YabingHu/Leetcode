#17. Letter Combinations of a Phone Number
#Time=O(4^n),space=O(4^n+n)
class Solution:
    def letterCombinations(self, digits):
        if not digits:return []
        dict = {"1":"", "2":"abc", "3":"def", "4":"ghi", "5":"jkl", "6":"mno", "7":"pqrs","8":"tuv","9":"wxyz","10":" "}
        res = []        
        self.dfs(dict,digits,0,"",res)
        return res
            
    def dfs(self,dict,string,level,out,res):
        if level ==len(string):
            res.append(out)
            return
        for i in dict[string[level]]:
            self.dfs(dict,string,level+1,out+i,res)
    
#39. Combination Sum
#Time=(2^n),space=O(k*n) where k is the number of answers
class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        res=[]
        self.helper(candidates,target,[],0,res)
        return res
    def helper(self,candidates,target,out,index,res):
        if target<0:return
        if target==0:
            res.append(out)
        for i in range(index,len(candidates)):
            self.helper(candidates,target-candidates[i],out+[candidates[i]],i,res)
        
    
#40. Combination Sum II
#Time=(2^n),space=O(k*n) where k is the number of answers
class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        res=[]
        candidates.sort()
        self.helper(candidates,target,[],0,res)
        return res
    def helper(self,candidates,target,out,index,res):
        if target<0:return
        if target==0:
            res.append(out)
        for i in range(index,len(candidates)):
            if i>index and candidates[i]==candidates[i-1]:continue
            self.helper(candidates,target-candidates[i],out+[candidates[i]],i+1,res)
            
#77. Combinations
#Time=O(k*C^n_{k}), space=O(C^n_{k})
class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        res=[]
        self.helper(n,k,1,[],res)
        return res
    def helper(self,n,k,index,out,res):
        if len(out)==k:
            res.append(out)
            return
        for i in range(index,n+1):
            self.helper(n,k,i+1,out+[i],res)
        return
            
#78. Subsets
#Time=O(n!),space=(n!)
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        res=[]
        self.helper(nums,0,[],res)
        return res
    def helper(self,nums,start,out,res):
        res.append(out)
        for i in range(start,len(nums)):
            self.helper(nums,i+1,out+[nums[i]],res)
        return
            
#90. Subsets II
#Time=O(n!),space=(n!)
class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        res=[]
        nums.sort()
        self.helper(nums,[],0,res)
        return res
    def helper(self,nums,out,index,res):
        res.append(out)
        for i in range(index,len(nums)):
            if i>index and nums[i]==nums[i-1]:continue
            self.helper(nums,out+[nums[i]],1+i,res)
            
#216. Combination Sum III
#Time=(2^n),space=O(k*n) where k is the number of answers
class Solution:
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        res=[]
        candidates=[1,2,3,4,5,6,7,8,9]
        self.helper(candidates,n,[],0,res,k)
        return res
    def helper(self,candidates,target,out,index,res,k):
        if target<0:return
        if target==0 and len(out)==k:
            res.append(out)
        for i in range(index,len(candidates)):
            if i>index and candidates[i]==candidates[i-1]:continue
            self.helper(candidates,target-candidates[i],out+[candidates[i]],i+1,res,k)

#46. Permutations
#Time=O(n!), space=O(n!), in fact recusion has the form T(n)=T(n-1）+T（n-2）+.... has the time complexity O(2^(n)),here since 
#this line: if visited[i]==1: continue , it reduce the time complexity from O(2^n) to O(n!)
class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        res=[]
        out=[]
        visited=[0]*len(nums)
        self.helper(nums,0,visited,out,res)
        return res
    
    def helper(self,nums,level,visited,out,res):
        if level==len(nums):
            res.append(out[:])
            return
        for i in range(len(nums)):
            if visited[i]==1: continue
            visited[i]=1
            out.append(nums[i])
            self.helper(nums,level+1,visited,out,res)
            out.pop()
            visited[i]=0
            
#Time=O(n!), space=O(n)
class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        res=[]
        self.helper(nums,0,res)
        return res
    def helper(self,nums,start,res):
        if start==len(nums):
            res.append(nums[:])
            return
        for i in range(start,len(nums)):
            nums[start],nums[i]=nums[i],nums[start]
            self.helper(nums,start+1,res)
            nums[start],nums[i]=nums[i],nums[start]

#47. Permutations II          
#Time=O(n!), space=O(n!)
class Solution:
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        res=[]
        out=[]
        visited=[0]*len(nums)
        nums.sort()
        self.helper(nums,0,visited,out,res)
        return res
    def helper(self,nums,level,visited,out,res):
        if level==len(nums):
            res.append(out[:])
            return
        for i in range(len(nums)):
            if visited[i]==1: continue
            if i>0 and nums[i]==nums[i-1] and visited[i-1]==0: continue
            visited[i]=1
            out.append(nums[i])
            self.helper(nums,level+1,visited,out,res)
            out.pop()
            visited[i]=0

#784. Letter Case Permutation
#Time=O(n* 2^l, l the number of letters in a string), space=O(n)+O(n*2^l)
class Solution:
    def letterCasePermutation(self, S: str) -> List[str]:
        ans = []
        self.helper(list(S), 0, len(S),ans)
        return ans
    def helper(self,S, i, n,ans):
        if i == n:
            ans.append(''.join(S))
            return
        self.helper(S, i + 1, n,ans)      
        if not S[i].isalpha(): return      
        S[i] = chr(ord(S[i]) ^ (1<<5))
        self.helper(S, i + 1, n,ans)
        S[i] = chr(ord(S[i]) ^ (1<<5))

#22. Generate Parentheses
#Time=O(n!)， seems like O(2^n) but using Catalan number theory, get O(n!), space=O(n)
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        res=[]
        self.helper(n,n,'',res)
        return res
    def helper(self,left,right,out,res):
        if left<0 or right<0 or left>right: return
        if left==0 and right==0:
            res.append(out)
            return
        self.helper(left-1,right,out+'(',res)
        self.helper(left,right-1,out+')',res)

#301. Remove Invalid Parentheses
#Time=O(2^n), space=O(n)
class Solution:
    def removeInvalidParentheses(self, s: str) -> List[str]:
        l,r=0,0
        for ch in s:
            l+=int(ch=='(')
            if l==0:
                r+=int(ch==')')
            else:
                l-=int(ch==')')
        ans=[]
        self.dfs(s,0,l,r,ans)
        return ans
        
    def isValid(self,s):
        count=0
        for ch in s:
            if ch=='(': count+=1
            if ch==')': count-=1
            if count<0: return False
        return count==0

    def dfs(self,s,start,l,r,ans):
        if l==0 and r==0:
            if self.isValid(s):
                ans.append(s)
                return
        for i in range(start,len(s)):
            if i!=start and s[i]==s[i-1]: continue
            if s[i]=='(' or s[i]==')':
                curr = s[:i] + s[(i+1):]
                if r>0 and s[i]==')':
                    self.dfs(curr,i,l,r-1,ans)
                elif l>0 and s[i]=='(':
                    self.dfs(curr,i,l-1,r,ans)

#37. Sudoku Solver
#Time=O(9^81) much less than that, space=O(9^81) recusion on stack
class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        self.helper(board,0,0)
    
    def helper(self,board,i,j):
        if i==9: 
            return True
        if j==9: 
            return self.helper(board,i+1,0)
        if board[i][j]=='.':
            for k in range(1,10):
                board[i][j]=str(k)
                if self.valid(board,i,j):
                    if self.helper(board,i,j+1):
                        return True
                board[i][j]='.'
        else:
            return self.helper(board,i,j+1)
        
        
    def valid(self,board,row,col):
        for j in range(9):
            if j!=col and board[row][col]==board[row][j]:
                return False
        for i in range(9):
            if i != row and board[row][col]==board[i][col]:
                return False
        for i in range((row//3)*3,(row//3)*3+3):
            for j in range((col//3)*3,(col//3)*3+3):
                if (i != row or j != col) and board[i][j]==board[row][col]:
                    return False
        return True
        
#51. N-Queens
#Time=O(n!), space=O(n!)
class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        res=[]
        out=[-1]*n
        self.helper(0,out,res)
        return res
    def helper(self,cur,out,res):
        n=len(out)
        if cur==n:
            output=[]
            dot='.'*n
            for i in out:
                output.append(dot[:i]+'Q'+dot[(i+1):])
            res.append(output)
            return
        for i in range(n):
            if self.valid(cur,i,out):
                out[cur]=i
                self.helper(cur+1,out,res)
                out[cur]=-1
        return 
    def valid(self,row,col,out):
        for r in range(row):
            if out[r]==col:
                return False
            if abs(r-row)==abs(out[r]-col):
                return False
        return True
 
#52. N-Queens II
#Time=O(n!), sapce=O(n!)
class Solution:
    def totalNQueens(self, n: int) -> int:
        out=[-1]*n
        return self.helper(0,out,0)
    def helper(self,cur,out,cnt):
        n=len(out)
        if cur==n:
            cnt+=1
            return cnt
        for i in range(n):
            if self.valid(cur,i,out):
                out[cur]=i
                cnt=self.helper(cur+1,out,cnt)
                out[cur]=-1
        return cnt
    def valid(self,row,col,out):
        for r in range(row):
            if out[r]==col:
                return False
            if abs(r-row)==abs(out[r]-col):
                return False
        return True

#79. Word Search
#Time=O(4^len(word)*m*n), space=O(m*n)+O(4^len(word)*m*n) during recursion
class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        m=len(board)
        if m==0: return False
        n=len(board[0])
        if n==0: return False
        visited=[[0]*n for _ in range(m)]
        for i in range(m):
            for j in range(n):
                if self.helper(board,word,visited,i,j,0):
                    return True
        return False
    
    def helper(self,board,word,visited,i,j,level):
        if level==len(word):
            return True
        m=len(board)
        n=len(board[0])
        if i<0 or j<0 or i>=m or j>=n or visited[i][j]!=0 or board[i][j]!=word[level]:
            return False
        visited[i][j]=1
        res= self.helper(board,word,visited,i+1,j,level+1) or self.helper(board,word,visited,i-1,j,level+1) or self.helper(board,word,visited,i,j+1,level+1) or self.helper(board,word,visited,i,j-1,level+1)
        visited[i][j]=0
        return res
        
#127. Word Ladder
#Time=O(m*n) where n is the length of wordList and m is the length of the word, space=O(n)
class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        dict={}
        for word in wordList:
            dict[word]=word
        if endWord not in dict: return 0
        res=0
        q=[beginWord]
        while q:
            for k in range(len(q)):
                cur=q.pop(0)
                if cur==endWord:
                    res+=1
                    return res
                for i in range(len(cur)):
                    temp=cur
                    for ch in 'abcdefghijklmnopqrstuvwxyz':
                        newWord=temp
                        temp=newWord[:i]+ch+newWord[i+1:]
                        if temp in dict and temp != cur:
                            q.append(temp)
                            dict.pop(temp)
            res+=1
        return 0
   
#752. Open the Lock
#Time=O(10000*8),space=O(10000+nums of deadends), 8 means 8 possible ways to change the lock by one #digits,from 0000 to 9999, 
#there are 10000 states
class Solution:
    def openLock(self, deadends: List[str], target: str) -> int:
        start='0000'
        deadends = set(deadends)
        if start in deadends: return -1
        if start==target:return 0
        q=[start]
        visited=set(start)
        step=0
        while q:
            step+=1
            size=len(q)
            for k in range(size):
                curr=q.pop(0)
                for i in range(4):
                    for j in range(-1,2):
                        next_ = curr[:i] + str((int(curr[i]) + j + 10) % 10) + curr[i+1:]
                        if next_==target:return step
                        if next_ in deadends or next_ in visited:continue
                        q.append(next_)
                        visited.add(next_)
        return -1
        
#542. 01 Matrix
#Time=O(m*n),space=O(m*n)
class Solution:
    def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:
        m=len(matrix)
        n=len(matrix[0])
        dirs=[(0,-1),(-1,0),(0,1),(1,0)]
        q=[]
        for i in range(m):
            for j in range(n):
                if matrix[i][j]==0:
                    q.append((i,j))
                else:matrix[i][j]=float('Inf')
        while q:
            t=q.pop(0)
            for dir in dirs:
                x=t[0]+dir[0]
                y=t[1]+dir[1]
                if x<0 or x>=m or y<0 or y>=n or matrix[x][y]<=matrix[t[0]][t[1]]+1:continue
                matrix[x][y]=matrix[t[0]][t[1]]+1
                q.append((x,y))
        return matrix
        
#675. Cut Off Trees for Golf Event
#Time=O(m^2*n^2),Space=O(mn)
class Solution:
    def cutOffTree(self, forest: List[List[int]]) -> int:
        m=len(forest)
        n=len(forest[0])
        tree=[]
        for i in range(m):
            for j in range(n):
                if forest[i][j]>0:
                    tree.append((forest[i][j],i,j))
        tree.sort()
        sx,sy=0,0
        res=0
        for i in range(len(tree)):
            ex=tree[i][1]
            ey=tree[i][2]
            step=self.helper(forest,sx,sy,ex,ey) 
            if step != float('Inf'):
                res+=step
            else: return -1
            sx=ex
            sy=ey
        return res
    
    def helper(self,forest,sx,sy,ex,ey):
        q=[(sx,sy)]
        m=len(forest)
        n=len(forest[0])
        visited=[[0]*n for _ in range(m)]
        visited[sx][sy]=1
        step=0
        while q:
            size=len(q)
            for k in range(size):
                cur=q.pop(0)
                cx=cur[0]
                cy=cur[1]
                if cx==ex and cy==ey: return step

                for i,j in [(1,0),(-1,0),(0,1),(0,-1)]:
                    if cx+i<0 or cx+i>=m or cy+j<0 or cy+j>=n or visited[cx+i][cy+j]!=0 or forest[cx+i][cy+j]==0:continue
                    visited[cx+i][cy+j]=1
                    q.append((cx+i,cy+j))
            step+=1
        return float('Inf')

#934. Shortest Bridge
#Time=O(m*n), space=O(m*n)
class Solution:
    def shortestBridge(self, A: List[List[int]]) -> int:
        q=[]
        found=False
        for i in range(len(A)):
            for j in range(len(A[0])):
                if found:break
                if A[i][j]:
                    self.helper(A,i,j,q)
                    found=True
        step=0
        dirs=[(0,1),(0,-1),(1,0),(-1,0)]
        while q:
            size=len(q)
            for k in range(size):
                t=q.pop(0)
                x=t[0]
                y=t[1]
                for i in range(4):
                    tx=x+dirs[i][0]
                    ty=y+dirs[i][1]
                    if tx<0 or ty<0 or tx>=len(A) or ty>=len(A[0]) or A[tx][ty]==2:continue
                    if A[tx][ty]==1:return step
                    A[tx][ty]=2
                    q.append((tx,ty))
            step+=1
        return -1
    def helper(self,A,x,y,q):
        #dfs for finding a island
        if x<0 or y<0 or x>=len(A) or y>=len(A[0]) or A[x][y]!=1:return
        A[x][y]=2
        q.append((x,y))
        self.helper(A,x-1,y,q)
        self.helper(A,x+1,y,q)
        self.helper(A,x,y+1,q)
        self.helper(A,x,y-1,q)

#698. Partition to K Equal Sum Subsets
#Time=O(k! * k^(n-k)), space=O(n)
class Solution:
    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:
        if sum(nums)%k!=0: return False
        nums.sort(reverse=True)
        visited=[0]*len(nums)
        return self.helper(nums,k,sum(nums)/k,0,0,visited)
    def helper(self,nums,k,target,start,curSum,visited):
        if k==1:return True
        if curSum>target: return False
        if curSum==target:return self.helper(nums,k-1,target,0,0,visited)
        for i in range(start,len(nums)):
            if visited[i]: continue
            visited[i]=True
            if self.helper(nums,k,target,i+1,curSum+nums[i],visited): return True
            visited[i]=False
        return False

#698. Partition to K Equal Sum Subsets
#Time=O(k! * k^(n-k)), space=O(n)
class Solution:
    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:
        if sum(nums)%k !=0: return False
        nums.sort(reverse=True)
        visited=[0]*len(nums)
        return self.helper(nums,k,sum(nums)/k,0,0,visited)
    def helper(self,nums,k,target,start,cur_sum,visited):
        if k==1:return True
        if cur_sum>target: return False
        if cur_sum==target: return self.helper(nums,k-1,target,0,0,visited)
        for i in range(start, len(nums)):
            if visited[i]==1: continue
            visited[i]=1
            if self.helper(nums,k,target,i+1,cur_sum+nums[i],visited): return True
            visited[i]=0
        return False

#416. Partition Equal Subset Sum
#Time=O(n^2),space=O(n) 
class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        s=sum(nums)
        if s%2 !=0: return False
        target=s//2
        dp=[False]*(target+1)
        dp[0]=True
        for num in nums:
            for k in range(target,num-1,-1):
                dp[k]=dp[k] or dp[k-num]
        return dp[target]

#93. Restore IP Addresses
class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        res=[]
        self.helper(res,'',s,0)
        return res
    
    def helper(self,res,out,s,index):
        if index==4:
            if not s:
                res.append(out[:-1])
            return
        for i in range(1,4):
            if i<=len(s):
                if i==1:
                    self.helper(res,out+s[:i]+'.',s[i:],index+1)
                if i==2 and s[0]!='0':
                    self.helper(res,out+s[:i]+'.',s[i:],index+1)
                if i==3 and s[0]!='0' and int(s[0:3])<=255:
                    self.helper(res,out+s[:i]+'.',s[i:],index+1)
    
