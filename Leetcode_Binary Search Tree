#99. Recover Binary Search Tree
#Time=O(n),space=O(n)
class Solution:
    def recoverTree(self, root: TreeNode) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        if not root : return None
        pre,first,second=None,None,None
        s=[]
        cur=root
        while s or cur:
            while cur:
                s.append(cur)
                cur=cur.left
            cur=s.pop()
            
            if pre and pre.val> cur.val:
                if not first:
                    first=pre
                second=cur
            pre=cur
            cur=cur.right
        first.val,second.val=second.val,first.val



#450. Delete Node in a BST
#Time=O(h), space=O(h)
class Solution:
    def deleteNode(self, root: TreeNode, key: int) -> TreeNode:
        if not root : return None
        if root.val<key:root.right= self.deleteNode(root.right,key)
        elif root.val>key:root.left=self.deleteNode(root.left,key)
        else:
            if not root.left and not root.right:
                root= None
            elif not root.left or not root.right:
                root= root.left if not root.right else root.right
            else:
                cur=root.right
                while cur.left:
                    cur=cur.left
                root.val=cur.val
                root.right= self.deleteNode(root.right, cur.val)
        return root

