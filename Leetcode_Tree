#124. Binary Tree 
#Time=O(n), space=O(h)
class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        self.res=float('-Inf')
        self.helper(root)
        return self.res
    
    def helper(self,root):
        if not root: return 0
        left=max(0,self.helper(root.left))
        right=max(0,self.helper(root.right))
        self.res=max(self.res,root.val+left+right)
        return root.val+max(left,right)

#543. Diameter of Binary Tree
#Time=O(n), space=O(logn)->O(n) worst case
class Solution:
    def diameterOfBinaryTree(self, root: TreeNode) -> int:
        self.res=0
        self.helper(root)
        return self.res
    
    def helper(self,root):
        if not root: return 0
        left=self.helper(root.left)
        right=self.helper(root.right)
        self.res=max(self.res,left+right)
        return max(left,right)+1
       
