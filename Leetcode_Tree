#124. Binary Tree 
#Time=O(n), space=O(h)
class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        self.res=float('-Inf')
        self.helper(root)
        return self.res
    
    def helper(self,root):
        if not root: return 0
        left=max(0,self.helper(root.left))
        right=max(0,self.helper(root.right))
        self.res=max(self.res,root.val+left+right)
        return root.val+max(left,right)

#543. Diameter of Binary Tree
#Time=O(n), space=O(logn)->O(n) worst case
class Solution:
    def diameterOfBinaryTree(self, root: TreeNode) -> int:
        self.res=0
        self.helper(root)
        return self.res
    
    def helper(self,root):
        if not root: return 0
        left=self.helper(root.left)
        right=self.helper(root.right)
        self.res=max(self.res,left+right)
        return max(left,right)+1


#687. Longest Univalue Path
#Time=O(n), space=O(logn)->O(n) worst case
class Solution:
    def longestUnivaluePath(self, root: TreeNode) -> int:
        self.res=0
        self.helper(root)
        return self.res
    def helper(self,root):
        if not root: return 0
        left=self.helper(root.left)
        right=self.helper(root.right)
        left=left+1 if root.left and root.left.val==root.val else 0
        right=right+1 if root.right and root.right.val == root.val else 0
        self.res=max(self.res,right+left)
        return max(left,right)
        
#129. Sum Root to Leaf Numbers
#Time=O(n), space=O(h)
class Solution:
    def sumNumbers(self, root: TreeNode) -> int:
        return self.helper(root,0)
    def helper(self,root,res):
        if not root: return 0
        if (not root.left) and (not root.right):
            return res*10+root.val
        return self.helper(root.left,10*res+root.val)+self.helper(root.right,10*res+root.val)

#257. Binary Tree Paths
#Time=O(n), space=O(logn)->O(n) worst case
class Solution:
    def binaryTreePaths(self, root: TreeNode) -> List[str]:
        res=[]
        self.helper(root,res,'')
        return res
    def helper(self,root,res,out):
        if not root:return 
        if not root.left and not root.right:
            res.append(out+str(root.val))
        if root.left:
            self.helper(root.left,res,out+str(root.val)+'->')
        if root.right:
            self.helper(root.right,res,out+str(root.val)+'->')
            
