#74. Search a 2D Matrix
#Time=O(log(m*n)), space=O(1)
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        m=len(matrix)
        if m==0: return False
        n=len(matrix[0])
        if n==0: return False
        if target<matrix[0][0] or target>matrix[m-1][n-1]:return False
        left=0
        right=m*n-1
        while left <= right:
            mid=left+(right-left)//2
            if matrix[mid//n][mid %n]==target:
                return True
            elif matrix[mid//n][mid%n]< target: left=mid+1
            else: right=mid-1
        return False
        
    
#378. Kth Smallest Element in a Sorted Matrix
#Time=O(nlgn*lgX),X is the difference between the maximum and minimum, space=O(1)
class Solution:
    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:
        left=matrix[0][0]
        right=matrix[-1][-1]
        while left <= right:
            mid=left+(right-left)//2
            cnt=0
            for i in range(len(matrix)):
                cnt+=bisect.bisect_right(matrix[i], mid)
            if cnt<k:
                left=mid+1
            else:
                right=mid-1
        return left
            
#668. Kth Smallest Number in Multiplication Table
#Time=O(m*log(mn)), space=O(1)
class Solution:
    def findKthNumber(self, m: int, n: int, k: int) -> int:
        left=0
        right=m*n
        while left <= right:
            cnt=0
            mid=left+(right-left)//2
            for i in range(1,m+1):
                cnt+=n if mid > n*i else mid//i
            if cnt < k:
                left=mid+1
            else: right=mid-1
        return left
