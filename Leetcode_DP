#741. Cherry Pickup
#Time=O(n^3), space=O(n^3)
#Time=O(n^3), space=O(n^3)
class Solution:
    def cherryPickup(self, grid: List[List[int]]) -> int:
        n=len(grid)
        dp=[[[ float('-Inf')]*(n) for _ in range(n)] for _ in range(n)]
        return max(0,self.helper(n-1,n-1,n-1,dp,grid))
    def helper(self,x1,y1,x2,dp,grid):
        y2=x1+y1-x2
        if x1<0 or y1<0 or x2<0 or y2<0: return -1
        if grid[x1][y1]==-1 or grid[x2][y2]==-1 : return -1
        if x1==0 and y1==0: return grid[x1][y1]
        if dp[x1][y1][x2] != float('-Inf'): return dp[x1][y1][x2]
        dp[x1][y1][x2] = max(self.helper(x1-1,y1,x2-1,dp,grid), self.helper(x1,y1-1, x2,dp,grid),
                                self.helper(x1,y1-1,x2-1,dp,grid), self.helper(x1-1, y1, x2,dp,grid))
    
        if dp[x1][y1][x2] >= 0:
            dp[x1][y1][x2]+=grid[x1][y1]
            if x1 != x2:
                dp[x1][y1][x2]+=grid[x2][y2]
        else:dp[x1][y1][x2]=-1
        return dp[x1][y1][x2]
