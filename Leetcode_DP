#741. Cherry Pickup
#Time=O(n^3), space=O(n^3)
#Time=O(n^3), space=O(n^3)
class Solution:
    def cherryPickup(self, grid: List[List[int]]) -> int:
        n=len(grid)
        dp=[[[ float('-Inf')]*(n) for _ in range(n)] for _ in range(n)]
        return max(0,self.helper(n-1,n-1,n-1,dp,grid))
    def helper(self,x1,y1,x2,dp,grid):
        y2=x1+y1-x2
        if x1<0 or y1<0 or x2<0 or y2<0: return -1
        if grid[x1][y1]==-1 or grid[x2][y2]==-1 : return -1
        if x1==0 and y1==0: return grid[x1][y1]
        if dp[x1][y1][x2] != float('-Inf'): return dp[x1][y1][x2]
        dp[x1][y1][x2] = max(self.helper(x1-1,y1,x2-1,dp,grid), self.helper(x1,y1-1, x2,dp,grid),
                                self.helper(x1,y1-1,x2-1,dp,grid), self.helper(x1-1, y1, x2,dp,grid))
    
        if dp[x1][y1][x2] >= 0:
            dp[x1][y1][x2]+=grid[x1][y1]
            if x1 != x2:
                dp[x1][y1][x2]+=grid[x2][y2]
        else:dp[x1][y1][x2]=-1
        return dp[x1][y1][x2]
        
#546. Remove Boxes
#Time=O(n^4), space=O(n^3)
class Solution:
    def removeBoxes(self, boxes: List[int]) -> int:
        N = len(boxes)
        memo = [[[0]*N for _ in range(N) ] for _ in range(N) ]
        def dp(l, r, k):
            if l > r: return 0
            if not memo[l][r][k]:
                m = l
                while m+1 <= r and boxes[m+1] == boxes[l]:
                    m += 1
                l, k = m, k + m - l
                ans = dp(l+1, r, 0) + (k+1) ** 2
                for i in range(l+1, r+1):
                    if boxes[l] == boxes[i]:
                        ans = max(ans, dp(l+1, i-1, 0) + dp(i, r, k+1))
                memo[l][r][k] = ans
            return memo[l][r][k]
        return dp(0, N-1, 0)

#980. Unique Paths III
#Time=O(4^(m*n)), space=O(m*n)
class Solution:
    def uniquePathsIII(self, grid: List[List[int]]) -> int:
        self.res = 0
        m, n,empty = len(grid), len(grid[0]),1
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1: x,y = (i, j)
                elif grid[i][j] == 2: end = (i, j)
                elif grid[i][j] == 0: empty += 1
        self.dfs(grid,x,y, empty,end)
        return self.res
    def dfs(self,grid,x, y, empty,end):
        m, n= len(grid), len(grid[0])
        if not (0 <= x < m and 0 <= y < n and grid[x][y] >= 0): return
        if (x, y) == end:
            self.res += empty == 0
            return
        grid[x][y] = -2
        self.dfs(grid,x + 1, y, empty - 1,end)
        self.dfs(grid,x - 1, y, empty - 1,end)
        self.dfs(grid,x, y + 1, empty - 1,end)
        self.dfs(grid,x, y - 1, empty - 1,end)
        grid[x][y] = 0
        
#996. Number of Squareful Arrays
#DFS,Time=O(n!), space=O(n)
class Solution:
    def numSquarefulPerms(self, A: List[int]) -> int:
        self.ans=0
        if not A: return ans
        A.sort()
        visited=[0]*len(A)
        self.helper(A,0,visited,[])
        return self.ans
    
    def sqr(self,a,b):
        s=int(math.sqrt(a+b))
        return s**2==a+b

    def helper(self,A,level,visited,out):
        if level==len(A):
            self.ans+=1
            return
        for i in range(len(A)):
            if visited[i]==1: continue
            if i > 0 and A[i]==A[i-1] and visited[i-1]==0:continue
            if out and not self.sqr(out[-1],A[i]): continue
            visited[i]=1
            self.helper(A,level+1,visited,out+[A[i]])
            visited[i]=0
