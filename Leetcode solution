####################################################
#Search

#37. Sudoku Solver
#Time=O(9^81) much less than that, space=O(9^81) recusion on stack
class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        self.helper(board,0,0)
    
    def helper(self,board,i,j):
        if i==9: 
            return True
        if j==9: 
            return self.helper(board,i+1,0)
        if board[i][j]=='.':
            for k in range(1,10):
                board[i][j]=str(k)
                if self.valid(board,i,j):
                    if self.helper(board,i,j+1):
                        return True
                board[i][j]='.'
        else:
            return self.helper(board,i,j+1)
        
        
    def valid(self,board,row,col):
        for j in range(9):
            if j!=col and board[row][col]==board[row][j]:
                return False
        for i in range(9):
            if i != row and board[row][col]==board[i][col]:
                return False
        for i in range((row//3)*3,(row//3)*3+3):
            for j in range((col//3)*3,(col//3)*3+3):
                if (i != row or j != col) and board[i][j]==board[row][col]:
                    return False
        return True
        
#51. N-Queens
#Time=O(n!), space=O(n!)
class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        res=[]
        out=[-1]*n
        self.helper(0,out,res)
        return res
    def helper(self,cur,out,res):
        n=len(out)
        if cur==n:
            output=[]
            dot='.'*n
            for i in out:
                output.append(dot[:i]+'Q'+dot[(i+1):])
            res.append(output)
            return
        for i in range(n):
            if self.valid(cur,i,out):
                out[cur]=i
                self.helper(cur+1,out,res)
                out[cur]=-1
        return 
    def valid(self,row,col,out):
        for r in range(row):
            if out[r]==col:
                return False
            if abs(r-row)==abs(out[r]-col):
                return False
        return True
 
#52. N-Queens II
#Time=O(n!), sapce=O(n!)
class Solution:
    def totalNQueens(self, n: int) -> int:
        out=[-1]*n
        return self.helper(0,out,0)
    def helper(self,cur,out,cnt):
        n=len(out)
        if cur==n:
            cnt+=1
            return cnt
        for i in range(n):
            if self.valid(cur,i,out):
                out[cur]=i
                cnt=self.helper(cur+1,out,cnt)
                out[cur]=-1
        return cnt
    def valid(self,row,col,out):
        for r in range(row):
            if out[r]==col:
                return False
            if abs(r-row)==abs(out[r]-col):
                return False
        return True
####################################################
#DP

####################################################
#Graph

####################################################
#Tree

####################################################
#Binary Search

####################################################
#Binary Search

####################################################
#Linked List

####################################################
#Array


####################################################
#String
