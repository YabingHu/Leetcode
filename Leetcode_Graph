#133. Clone Graph
#DFS Solution, both time and space are O(n)
"""
# Definition for a Node.
class Node:
    def __init__(self, val, neighbors):
        self.val = val
        self.neighbors = neighbors
"""
class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        dict={}
        return self.helper(node,dict)
    def helper(self,node,dict):
        if node ==None: return None
        if node in dict:
            return dict[node]
        dup=Node(node.val,[])
        dict[node]=dup
        for neighbor in node.neighbors:
            clone=self.helper(neighbor,dict)
            dup.neighbors.append(clone)
        return dup
        
#BFS Solution, both time and space are O(n)
class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        if not node: return None
        dict={}
        queue=[node]
        dup=Node(node.val,[])
        dict[node]=dup
        while queue:
            t=queue.pop(0)
            for neighbor in t.neighbors:
                if neighbor not in dict:
                    dict[neighbor]=Node(neighbor.val,[])
                    queue.append(neighbor)
                dict[t].neighbors.append(dict[neighbor])
        return dup

#138. Copy List with Random Pointer
#Time and space O(n)
"""
# Definition for a Node.
class Node:
    def __init__(self, val, next, random):
        self.val = val
        self.next = next
        self.random = random
"""
class Solution:
    def copyRandomList(self, head: 'Node') -> 'Node':
        if head == None: return None
        dict={}
        node=head
        while node:
            dict[node]=Node(node.val,None,None)
            node=node.next
        node=head
        while node:
            if node.next:
                dict[node].next=dict[node.next]
            if node.random:
                dict[node].random=dict[node.random]
            node=node.next
        return dict[head]
    
#200. Number of Islands    
#Time and space O(m*n)
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        m=len(grid)
        if m==0 : return 0
        n=len(grid[0])
        visited=[[0]*n for _ in range(m) ]
        res=0
        for i in range(m):
            for j in range(n):
                if grid[i][j]=='1' and visited[i][j]==0:
                    self.helper(grid,visited,i,j)
                    res+=1
        return res
    
    def helper(self,grid,visited,x,y):
        m,n=len(grid),len(grid[0])
        if x<0 or x>=m or y<0 or y>=n or visited[x][y]==1 or grid[x][y] !='1': return
        visited[x][y]=1
        self.helper(grid,visited,x-1,y)
        self.helper(grid,visited,x+1,y)
        self.helper(grid,visited,x,y+1)
        self.helper(grid,visited,x,y-1)
 
#547. Friend Circles
#Time O(n^2),space=O(n)
class Solution:
    def findCircleNum(self, M: List[List[int]]) -> int:
        if not M:return 0
        m=len(M)
        visited=[0]*m
        res=0
        for i in range(m):
            if visited[i]==1: continue
            self.helper(M,i,m,visited)
            res+=1
        return res
    
    def helper(self,M,i,m,visited):
        if visited[i]==1:return
        visited[i]=1
        for j in range(m):
            if M[i][j] and visited[j]==0:
                self.helper(M,j,m,visited)


#695. Max Area of Island
#Time and space O(m*n)
class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        m=len(grid)
        if m==0 : return 0
        n=len(grid[0])
        res=0
        for i in range(m):
            for j in range(n):
                if grid[i][j]==1:
                    area=self.helper(grid,i,j,0)
                    res=max(res,area)   
        return res
    
    def helper(self,grid,x,y,area):
        m,n=len(grid),len(grid[0])
        if x<0 or x>=m or y<0 or y>=n or grid[x][y]==0: return area
        grid[x][y]=0
        area+=1
        area=self.helper(grid,x-1,y,area)
        area=self.helper(grid,x+1,y,area)
        area=self.helper(grid,x,y-1,area)
        area=self.helper(grid,x,y+1,area)
        return area

#733. Flood Fill
#Time=O(m*n),space=O(1)
class Solution:
    def floodFill(self, image: List[List[int]], sr: int, sc: int, newColor: int) -> List[List[int]]:
        if image[sr][sc]==newColor: return image
        m,n=len(image),len(image[0])
        self.helper(image,sr,sc,image[sr][sc],newColor)
        return image
    def helper(self,image,x,y,preColor,newColor):
        m,n=len(image),len(image[0])
        if x<0 or x>=m or y<0 or y>=n: return
        if image[x][y] !=preColor: return
        image[x][y]=newColor
        self.helper(image,x+1,y,preColor,newColor)
        self.helper(image,x-1,y,preColor,newColor)
        self.helper(image,x,y+1,preColor,newColor)
        self.helper(image,x,y-1,preColor,newColor)

#827. Making A Large Island

#841. Keys and Rooms
#Time=O(E+V),space=O(V)
class Solution:
    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:
        m=len(rooms)
        if m ==1:return True
        visited=[0]*m
        self.helper(0,rooms,visited)
        if sum(visited)==m:
            return True
        else:
            return False
    def helper(self,i,rooms,visited):
        if visited[i]==1: return
        visited[i]=1
        for j in rooms[i]:
             self.helper(j,rooms,visited)
        
#802. Find Eventual Safe States
#Time=O(V+E),space=O(V+E)
class Solution:
    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:
        states=['UNKNOWN']*len(graph)
        ans=[]
        for i in range(len(graph)):
            if self.helper(graph,i,states)=='SAFE':
                ans.append(i)
        return ans
    def helper(self,graph,cur,states):
        if states[cur]=='VISITING':
            states[cur]='UNSAFE'
            return states[cur]
        if states[cur] != 'UNKNOWN':
            return states[cur]
        states[cur] = 'VISITING'
        for j in graph[cur]:
            if self.helper(graph,j,states)=='UNSAFE':
                states[cur]='UNSAFE'
                return states[cur]
        states[cur]='SAFE'
        return states[cur]

#207. Course Schedule
#Time=O(n),space=O(n)
def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        graph = [[] for _ in range(numCourses)]
        for course, prerequisite in prerequisites:
            graph[prerequisite].append(course)
        visited=[0]*numCourses
        for i in range(numCourses):
            if self.helper(i,graph,visited):
                return False
        return True
    #If there is a cycle, return TRUE
    #1 visiting/2 visited
    def helper(self,curr,graph,visited):
        if visited[curr]==1: return True
        if visited[curr]==2: return False
        visited[curr]=1
        for ele in graph[curr]:
            if self.helper(ele,graph,visited):
                return True
        visited[curr]=2
        return False
    
#210. Course Schedule II
#Time=O(n),space=O(n)
class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        graph = [[] for _ in range(numCourses)]
        res=[]
        for course, prerequisite in prerequisites:
            graph[prerequisite].append(course)
        visited=[0]*numCourses
        for i in range(numCourses):
            if self.helper(i,graph,visited,res):
                return []
        return res[::-1]
    #If there is a cycle, return True
    def helper(self,curr,graph,visited,res):
        if visited[curr]==1: return True
        if visited[curr]==2: return False
        visited[curr]=1
        for ele in graph[curr]:
            if self.helper(ele,graph,visited,res):
                return True
        visited[curr]=2
        res.append(curr)
        return False
    
#399. Evaluate Division
#Time=O(number of equations+e*num of queries),space=O(e)
class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        res=[]
        g=collections.defaultdict(dict)
        for (x,y),v in zip(equations,values):
            g[x][y]=v
            g[y][x]=1/v
            
        for (x,y) in queries:
            res.append(self.helper(g,x,y,[]) if x in g and y in g else -1)
        return res
    def helper(self,g,x,y,visited):
        if x==y:return 1
        visited.append(x)
        for neigh in g[x]:
            if neigh in visited:continue
            visited.append(neigh)
            d=self.helper(g,neigh,y,visited)
            if d>0:return d*g[x][neigh]
        return -1
    
    
#952. Largest Component Size by Common Factor
#Time complexity: O(n*Î£sqrt(A[i])) Space complexity: O(max(A))
class Solution:
    def largestComponentSize(self, A: List[int]) -> int:
        p=list(range(max(A)+1))
        for a in A:
            for i in range(2,int(math.sqrt(a)+1)):
                if a % i ==0:
                    self.union(a,i,p)
                    self.union(a,int(a/i),p)
        dict={}
        ans=1
        for a in A:
            if self.find(a,p) in dict:
                dict[self.find(a,p)]+=1
            else:dict[self.find(a,p)]=1
            ans=max(ans,dict[self.find(a,p)])
        return ans
    
    def find(self,x,p):
        while x!=p[x]:
            p[x]=p[p[x]]
            x=p[x]
        return x
    
    def union(self,x,y,p):
        p[self.find(x,p)]=p[self.find(y,p)]

#990. Satisfiability of Equality Equations
#Time=O(n),space=O(26)->O(1)
class Solution:
    def equationsPossible(self, equations: List[str]) -> bool:
        UF={}
        for eq in equations:
            x,e1,e2,y=eq
            if x not in UF:UF[x]=x
            if y not in UF:UF[y]=y
            if e1=="=":
                UF[self.find(x,UF)]=UF[self.find(y,UF)]
        for eq in equations:
            x,e1,e2,y=eq
            if e1=="=" and self.find(x,UF)!=self.find(y,UF):
                return False
            if e1=="!" and self.find(x,UF)==self.find(y,UF):
                return False
        return True
    def find(self,x,UF):
        while x!=UF[x]:
            UF[x]=UF[UF[x]]
            x=UF[x]
        return x

#721. Accounts Merge
#Time=O(n), space=O(n)
class Solution:
    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]: 
        res=[]
        p=list(range(10001))
        em_name={}
        em_id={}
        i=0
        for account in accounts:
            for em in account[1:]:
                em_name[em]=account[0]
                if em not in em_id:
                    em_id[em]=i
                    i+=1
                self.union(p,em_id[account[1]],em_id[em])
                
        ans=collections.defaultdict(list)
        for em in em_name:
            ans[self.find(p,em_id[em])].append(em)
        for v in ans.values():
            res.append([em_name[v[0]]]+sorted(v))
        return res
    
    def union(self,p,x,y):
        p[self.find(p,x)]=self.find(p,y)
    
    def find(self,p,x):
        while x != p[x]:
            p[x]=p[p[x]]
            x=p[x]
        return x

#785. Is Graph Bipartite?
#Time=O(n*m), space=O(n)
class Solution:
    def isBipartite(self, graph: List[List[int]]) -> bool:
        p=list(range(len(graph)))
        for i in range(len(graph)):
            if not graph[i]:continue
            x=self.find(p,i)
            y=self.find(p,graph[i][0])
            if x==y:return False
            for j in range(1,len(graph[i])):
                temp=self.find(p,graph[i][j])
                if x==temp:return False
                p[temp]=y
        return True
    def find(self,p,x):
        while x!=p[x]:
            p[x]=p[p[x]]
            x=p[x]
        return x

#684. Redundant Connection
#Time=O(n), space=O(n)
class Solution:
    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:
        p = [0]*(len(edges) + 1)
        s = [1]*(len(edges) + 1)
        
        for u, v in edges:
            if p[u] == 0: p[u] = u
            if p[v] == 0: p[v] = v
            pu, pv = self.find(u,p), self.find(v,p)
            if pu == pv: return [u, v]
            
            if s[pv] > s[pu]: u, v = v, u
            p[pv] = pu
            s[pu] += s[pv]
        return []
    
    def find(self,u,p):
        while p[u] != u:
            p[u] = p[p[u]]
            u = p[u]
        return u

#685. Redundant Connection II
#Time=O(n), space=O(n)
class Solution:
    def findRedundantDirectedConnection(self, edges: List[List[int]]) -> List[int]:
        p = [0]*(len(edges) + 1)
        r = [0]*(len(edges) + 1)
        s = [1]*(len(edges) + 1)
        ans1=[]
        ans2=[]
        for edge in edges:
            u=edge[0]
            v=edge[1]
            #if a node has two parentsï¼case 2
            if p[v]>0:
                ans1=[p[v],v]
                ans2=[u,v]
                edge[0]=-1
                edge[1]=-1
            p[v]=u
        
        for edge in edges:
            u=edge[0]
            v=edge[1]
            if u<0 or v<0:
                continue
            if not r[u]: r[u] = u
            if not r[v]: r[v] = v
            pu= self.find(u,r)
            pv= self.find(v,r)
            #case 1 and case 2.2
            if pu == pv:
                if not ans1: 
                    return edge
                else: return ans1
            if s[pv] > s[pu]: u, v = v, u
            r[pv] = pu
            s[pu] += s[pv]
        #case 2.1, no cycle
        return ans2
    
    def find(self,u,p):
        while p[u] != u:
            p[u] = p[p[u]]
            u = p[u]
        return u

#787. Cheapest Flights Within K Stops
#BFS, time=O(n*(k+1)), space=O(n*(k+1))
class Solution:
    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, K: int) -> int:
        graph = collections.defaultdict(list)
        q=[]
        min_price = float('inf')
        for u, v, w in flights: graph[u].append((w, v))
        q.append((src, 0, 0))
        while q:
            city, stops, price = q.pop(0)
            if city==dst:
                min_price = min(min_price, price)
                continue

            if stops<=K and price<=min_price:
                for price_to_neigh, neigh in graph[city]:
                    q.append((neigh, stops+1, price+price_to_neigh))

        return min_price if min_price!=float('inf') else -1

#743. Network Delay Time
##Time=O(N*E), space=O(N)
class Solution:
    def networkDelayTime(self, times: List[List[int]], N: int, K: int) -> int:
        MAX_TIME=100*100+1
        dp=[MAX_TIME]*N
        dp[K-1]=0
        for i in range(1,N):
            #the shortest path has maximum N-1 edges
            for time in times:
                u=time[0]
                v=time[1]
                w=time[2]
                dp[v-1]=min(dp[v-1],dp[u-1]+w)
        res=max(dp)
        return -1 if res==MAX_TIME else res

#882. Reachable Nodes In Subdivided Graph
#Time=E*log(E), space=O(E)
class Solution:
    def reachableNodes(self, edges: List[List[int]], M: int, N: int) -> int:
        g= collections.defaultdict(dict)
        for e in edges:
            g[e[0]][e[1]]=g[e[1]][e[0]]=e[2]
        q = [(-M, 0)]
        HP={}
        while q:
            hp, cur= heapq.heappop(q)
            if cur in HP:continue
            HP[cur]=-hp
            for pair in g[cur]:
                nxt=pair
                nxt_hp=-hp-g[cur][pair]-1
                if nxt not in HP and nxt_hp>=0:
                    heapq.heappush(q, (-nxt_hp, nxt))
        ans=len(HP)
        print(HP)
        for e in edges:
            uv=HP[e[0]] if e[0] in HP else 0
            vu=HP[e[1]] if e[1] in HP else 0
            ans+=min(e[2],uv+vu)
        return ans

#847. Shortest Path Visiting All Nodes
#Time=O(n*2^n), space=O(n*2^n)
class Solution:
    def shortestPathLength(self, graph: List[List[int]]) -> int:
        n=len(graph)
        kAns=(1<< n)-1
        visited=[[0]*(1<<n) for _ in range(n)]
        q=[]
        for i in range(len(graph)):
            q.append((i,1<<i))
        steps=0
        while q:
            s=len(q)
            for j in range(s):
                p=q.pop(0)
                state=p[1]
                node=p[0]
                if state==kAns:return steps
                if visited[node][state]:continue
                visited[node][state]=1
                for next_ in graph[node]:
                    q.append((next_ , state | (1<<next_)))
            steps+=1
        return -1
        
#815. Bus Routes
#Time=O(n^2), space=O(n^2)
class Solution:
    def numBusesToDestination(self, routes: List[List[int]], S: int, T: int) -> int:
        if S==T: return 0
        res=0
        stop2bus= collections.defaultdict(list)
        q=[S]
        visited=[]
        for i in range(len(routes)):
            for j in routes[i]:
                stop2bus[j].append(i)
        while q:
            res+=1
            for i in range(len(q)):
                t=q.pop(0)
                for bus in stop2bus[t]:
                    if bus in visited: continue
                    visited.append(bus)
                    for stop in routes[bus]:
                        if stop ==T: return res
                        q.append(stop)
        return -1

#864. Shortest Path to Get All Keys
#Time=O(m*n*2^(num of keys)), space=O(m*n*2^(num of keys))
class Solution:
    def shortestPathAllKeys(self, grid: List[str]) -> int:
        m, n = len(grid), len(grid[0])
        all_keys = 0
        seen = [[[None]* 64 for _ in range(n)] for _ in range(m)]
        q = []
        for i in range(m):
            for j in range(n):
                c = grid[i][j]
                if c == '@':
                    q.append((j << 16) | (i << 8))
                    seen[i][j][0] = 1
                elif c >= 'a' and c <= 'f':
                    all_keys |= (1 << (ord(c) - ord('a')))
        dirs = [-1, 0, 1, 0, -1]
        steps = 0
        while q:
            size = len(q)
            for i in range(size):
                s = q.pop(0)
                x = s >> 16
                #0xff=2^8-1
                y = (s >> 8) & 0xff
                keys = s & 0xff        
                if keys == all_keys: return steps
                for i in range(4):
                    nx, ny, nkeys = x + dirs[i], y + dirs[i + 1], keys          
                    if nx < 0 or nx >= n or ny < 0 or ny >= m: continue
                    c = grid[ny][nx]
                    if c == '#': continue
                    if c in string.ascii_uppercase and keys & (1 << (ord(c) - ord('A'))) == 0: continue
                    if c in string.ascii_lowercase: nkeys |= (1 << (ord(c) - ord('a')))
                    if seen[ny][nx][nkeys]: continue
                    q.append((nx << 16) | (ny << 8) | nkeys)
                    seen[ny][nx][nkeys] = 1
            steps += 1
        return -1

#924. Minimize Malware Spread
#Time=O(n^2), space=O(n)
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        # init
        n = len(graph)
        parents = list(range(n))
        # union
        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j] == 1:
                    self.union(i, j,parents)
        area = collections.Counter(self.find(i,parents) for i in range(n))
        malware = collections.Counter(self.find(i,parents) for i in initial)
        save, res = 0, min(initial)
        for i in initial:
            if malware[self.find(i,parents)] == 1:
                if area[self.find(i,parents)] > save:
                    save, res = area[self.find(i,parents)], i
                elif area[self.find(i,parents)] == save:
                    res = min(res, i)
        return res
    
    def find(self,x,parents):
        while x != parents[x]:
            parents[x] =parents[parents[x]]
            x=parents[x]
        return x
    
    def union(self,x, y,parents):
        parents[self.find(x,parents)]=self.find(y,parents)

#934. Shortest Bridge
#Time=O(m*n), space=O(m*n)
class Solution:
    def shortestBridge(self, A: List[List[int]]) -> int:
        q=[]
        found=False
        for i in range(len(A)):
            for j in range(len(A[0])):
                if found:break
                if A[i][j]:
                    self.helper(A,i,j,q)
                    found=True
        step=0
        dirs=[(0,1),(0,-1),(1,0),(-1,0)]
        while q:
            size=len(q)
            for k in range(size):
                t=q.pop(0)
                x=t[0]
                y=t[1]
                for i in range(4):
                    tx=x+dirs[i][0]
                    ty=y+dirs[i][1]
                    if tx<0 or ty<0 or tx>=len(A) or ty>=len(A[0]) or A[tx][ty]==2:continue
                    if A[tx][ty]==1:return step
                    A[tx][ty]=2
                    q.append((tx,ty))
            step+=1
        return -1
    def helper(self,A,x,y,q):
        #dfs for finding a island
        if x<0 or y<0 or x>=len(A) or y>=len(A[0]) or A[x][y]!=1:return
        A[x][y]=2
        q.append((x,y))
        self.helper(A,x-1,y,q)
        self.helper(A,x+1,y,q)
        self.helper(A,x,y+1,q)
        self.helper(A,x,y-1,q)
