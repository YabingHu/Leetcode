#3. Longest Substring Without Repeating Characters
#Time=O(n), space=O(n)
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        res=0
        left=-1
        dict={}
        for i in range(len(s)):
            if s[i] in dict and dict[s[i]]>left:
                left=dict[s[i]]
            dict[s[i]]=i
            res=max(res,i-left)
        return res

#992. Subarrays with K Different Integers
#Time=O(n), space=O(n)
class Solution:
    def subarraysWithKDistinct(self, A: List[int], K: int) -> int:
        return self.helper(A,K)-self.helper(A,K-1)
    def helper(self,A,K):
        count = collections.Counter()
        res,i = 0,0
        for j in range(len(A)):
            if count[A[j]] == 0: K -= 1
            count[A[j]] += 1
            while K < 0:
                count[A[i]] -= 1
                if count[A[i]] == 0: K += 1
                i += 1
            res += j - i + 1
        return res
